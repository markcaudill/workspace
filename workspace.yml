---

- name: Configure Local Workspace
  hosts: localhost
  vars:
    workspace_xdg_directories:
      bin: "{{ ansible_env.HOME }}/.local/bin"
      cache_home: "{{ ansible_env.XDG_CACHE_HOME | default(ansible_env.HOME + '/.cache') }}"
      config_home: "{{ ansible_env.XDG_CONFIG_HOME | default(ansible_env.HOME + '/.config') }}"
      data_home: "{{ ansible_env.XDG_DATA_HOME | default(ansible_env.HOME + '/.local/share') }}"
      state_home: "{{ ansible_env.XDG_STATE_HOME | default(ansible_env.HOME + '/.local/state') }}"

    workspace_directories:
      - { path: "{{ workspace_xdg_directories.bin }}", mode: '0750' }
      - { path: "{{ workspace_xdg_directories.cache_home }}", mode: '0750' }
      - { path: "{{ workspace_xdg_directories.config_home }}", mode: '0750' }
      - { path: "{{ workspace_xdg_directories.data_home }}", mode: '0750' }
      - { path: "{{ workspace_xdg_directories.state_home }}", mode: '0750' }
      - { path: "{{ ansible_env.HOME }}/.nvm", mode: '0750' }

    workspace_environment:
      GOBIN: "{{ workspace_xdg_directories.data_home }}/go/bin"
      GOPATH: "{{ workspace_xdg_directories.data_home }}/go"
      PATH: "{{ workspace_xdg_directories.data_home }}/go/bin:{{ workspace_xdg_directories.bin }}:{{ ansible_env.PATH }}"
      XDG_CACHE_HOME: "{{ workspace_xdg_directories.cache_home }}"
      XDG_CONFIG_HOME: "{{ workspace_xdg_directories.config_home }}"
      XDG_DATA_HOME: "{{ workspace_xdg_directories.data_home }}"
      XDG_STATE_HOME: "{{ workspace_xdg_directories.state_home }}"
      PROFILE: "/dev/null"

    workspace_prerequisite_packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - flatpak
      - git
      - gnupg2
      - libssl-dev
      - make
      - python3-pip
      - snapd
      - software-properties-common
      - stow

    workspace_apt_keys:
      - https://apt.releases.hashicorp.com/gpg
      - https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
      - https://deb.nodesource.com/gpgkey/nodesource.gpg.key
      - https://download.docker.com/linux/debian/gpg
      - https://packages.cloud.google.com/apt/doc/apt-key.gpg
      - https://cli.github.com/packages/githubcli-archive-keyring.gpg

    workspace_apt_repos:
      - "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"
      - "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
      - "deb https://apt.kubernetes.io/ kubernetes-xenial main"
      - "deb https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
      - "deb https://deb.nodesource.com/node_16.x {{ ansible_distribution_release }} main"
      - "deb [arch=amd64] https://cli.github.com/packages stable main"
      - "ppa:lutris-team/lutris"

    workspace_apt_debs:
      - "https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
      - https://cdn.cloudflare.steamstatic.com/client/installer/steam.deb
      - https://global.download.synology.com/download/Utility/SynologyDriveClient/3.0.1-12674/Ubuntu/Installer/x86_64/synology-drive-client-12674.x86_64.deb
      - https://launcher.mojang.com/download/Minecraft.deb
      - https://prerelease.keybase.io/keybase_amd64.deb
      - https://wallet.trezor.io/data/udev/trezor-udev_2_all.deb
      - "https://discord.com/api/download?platform=linux&format=deb"
      - https://www.dropbox.com/download?dl=packages/ubuntu/dropbox_2020.03.04_amd64.deb

    workspace_services:
      - { name: docker, enabled: true, state: started }

    workspace_apt_packages:
      - brave-browser
      - bridge-utils
      - deja-dup
      - docker-ce
      - docker-compose
      - duplicity
      - fonts-firacode
      - fonts-noto-color-emoji
      - fritzing
      - gcc-multilib
      - gh
      - gimp
      - git
      - gnupg2
      - gnupg-agent
      - hopenpgp-tools
      - jq
      - kicad
      - kitty
      - kubectl
      - libarchive-zip-perl
      - libncurses-dev
      - libvirt-clients
      - libvirt-daemon-system
      - lm-sensors
      - logisim
      - lutris
      - m4
      - mpv
      - neofetch
      - nodejs
      - packer
      - pcscd
      - psensor
      - pv
      - qemu-kvm
      - ranger
      - scdaemon
      - terraform
      - thunderbird
      - tidy
      - tmux
      - vault
      - vim
      - virt-manager
      - weechat
      - winetricks
      - xclip
      - xmlstarlet
      - xournal
      - youtube-dl
      - yubikey-manager
      - yubikey-personalization

    workspace_flatpak_remotes:
      - name: flathub
        flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo

    workspace_flatpaks:
      - name: org.signal.Signal
        method: user
        remote: flathub
      - name: com.spotify.Client

    workspace_snaps:
      - name: todoist
        become: true

    workspace_pip_packages:
      - { name: "molecule[ansible, lint, docker]", extra_args: --user }

    workspace_archives:
      - name: ctlptl
        url: https://github.com/tilt-dev/ctlptl/releases/download/v0.6.0/ctlptl.0.6.0.linux.x86_64.tar.gz
        dest: "{{ workspace_xdg_directories.bin }}"
        include: ctlptl
        creates: "{{ workspace_xdg_directories.bin }}/ctlptl"
      - name: drone cli
        url: https://github.com/drone/drone-cli/releases/latest/download/drone_linux_amd64.tar.gz
        dest: "{{ workspace_xdg_directories.bin }}"
        creates: "{{ workspace_xdg_directories.bin }}/drone"
      - name: go
        url: https://go.dev/dl/go1.17.6.linux-amd64.tar.gz
        dest: "{{ workspace_xdg_directories.data_home }}"
      - name: wtfutil
        url: https://github.com/wtfutil/wtf/releases/latest/download/wtf_0.41.0_linux_amd64.tar.gz
        dest: "{{ workspace_xdg_directories.data_home }}"

    workspace_go_packages:
      - package: github.com/ericchiang/pup@latest
        creates: "{{ workspace_xdg_directories.data_home }}/go/bin/pup"
      - package: github.com/jessfraz/pony@latest
        creates: "{{ workspace_xdg_directories.data_home }}/go/bin/pony"
      - package: sigs.k8s.io/kind@v0.11.1
        creates: "{{ workspace_xdg_directories.data_home }}/go/bin/kind"
      - package: github.com/nektos/act@latest
        creates: "{{ workspace_xdg_directories.data_home }}/go/bin/act"

    workspace_curl_bashes:
      - url: https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh
        dest: "{{ workspace_xdg_directories.cache_home }}/tilt_install.sh"
        creates: "{{ ansible_env.HOME }}/.local/bin/tilt"
      - url: https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh
        dest: "{{ workspace_xdg_directories.cache_home }}/nvm_install.sh"
        creates: "{{ workspace_xdg_directories.cache_home }}/.nvm"
      - url: https://get.pulumi.com
        dest: "{{ workspace_xdg_directories.cache_home }}/pulumi_install.sh"
        creates: "{{ ansible_env.HOME }}/.pulumi/bin/pulumi"

    workspace_git_repos:
      - repo: https://github.com/markcaudill/dotfiles.git
        dest: "{{ workspace_xdg_directories.data_home }}/dotfiles"
        force: true

    workspace_make_targets:
      - chdir: "{{ workspace_xdg_directories.data_home }}/dotfiles"
        target: stow
        failed_when: false

    workspace_user_groups:
      - { user: "{{ lookup('env', 'USER') }}", groups: [dialout, docker, kvm, libvirt] }

    workspace_bins:
      - url: https://github.com/openfaas/faas-cli/releases/latest/download/faas-cli
        dest: "{{ ansible_env.HOME }}/.local/bin/faas-cli"
        creates: "{{ ansible_env.HOME }}/.local/bin/faas-cli"
      - url: https://github.com/alexellis/arkade/releases/latest/download/arkade
        dest: "{{ ansible_env.HOME }}/.local/bin/arkade"
        creates: "{{ ansible_env.HOME }}/.local/bin/arkade"

    workspace_files:
      - src: "{{ workspace_xdg_directories.data_home }}/wtf_0.41.0_linux_amd64/wtfutil"
        dest: "{{ workspace_xdg_directories.bin }}/wtfutil"
        state: link

    workspace_sysctl:
      - name: fs.inotify.max_user_watches
        value: 524288

    workspace_update_all_packages: true

  handlers:
    - name: start packagekit
      become: true
      ansible.builtin.service:
        name: packagekit
        state: started

  tasks:
    - name: stop packagekit so it won't interfere with package installation
      become: true
      ansible.builtin.service:
        name: packagekit
        state: stopped
      failed_when: false
      notify: start packagekit


    - name: ensure directories are present
      ansible.builtin.file:
        path: "{{ item.path }}"
        mode: "{{ item.mode }}"
        state: directory
      loop: "{{ workspace_directories }}"


    - name: ensure prerequisite packages are installed
      become: true
      ansible.builtin.apt:
        name: "{{ workspace_prerequisite_packages }}"
        update_cache: true


    - name: ensure apt keys are installed
      become: true
      ansible.builtin.apt_key:
        url: "{{ item }}"
      loop: "{{ workspace_apt_keys }}"
      failed_when: false


    - name: ensure apt repos are configured
      become: true
      ansible.builtin.apt_repository:
        repo: "{{ item }}"
      loop: "{{ workspace_apt_repos }}"


    - name: ensure packages are installed
      become: true
      ansible.builtin.apt:
        name: "{{ workspace_apt_packages }}"
        update_cache: true


    - name: ensure package debs are installed
      become: true
      ansible.builtin.apt:
        deb: "{{ item }}"
      loop: "{{ workspace_apt_debs }}"
      failed_when: false

    - name: ensure flatpak remotes are configured
      become: "{{ item.become|default(false)|bool }}"
      community.general.flatpak_remote:
        method: "{{ item.method|default('user') }}"
        name: "{{ item.name }}"
        flatpakrepo_url: "{{ item.flatpakrepo_url|default(omit) }}"
        state: "{{ item.state|default(omit) }}"
      loop: "{{ workspace_flatpak_remotes }}"


    - name: ensure flatpaks are installed
      become: "{{ item.become|default(false)|bool }}"
      community.general.flatpak:
        method: "{{ item.method|default('user') }}"
        name: "{{ item.name }}"
        no_dependencies: "{{ item.no_dependencies|default(omit) }}"
        remote: "{{ item.remote|default(omit) }}"
        state: "{{ item.state|default(omit) }}"
      loop: "{{ workspace_flatpaks }}"

    - name: ensure snaps are installed
      become: "{{ item.become|default(false)|bool }}"
      community.general.snap:
        channel: "{{ item.channel|default(omit) }}"
        classic: "{{ item.classic|default(omit) }}"
        name: "{{ item.name }}"
        state: "{{ item.state|default(omit) }}"
      loop: "{{ workspace_snaps }}"


    - name: ensure services are configured
      become: true
      ansible.builtin.service:
        name: "{{ item.name }}"
        enabled: "{{ item.enabled }}"
        state: "{{ item.state }}"
      loop: "{{ workspace_services }}"


    - name: ensure pip packages are installed
      environment: "{{ workspace_environment }}"
      ansible.builtin.pip:
        name: "{{ item.name }}"
        extra_args: "{{ item.extra_args }}"
      loop: "{{ workspace_pip_packages }}"


    - name: ensure archives are installed
      ansible.builtin.unarchive:
        src: "{{ item.url }}"
        dest: "{{ item.dest }}"
        remote_src: true
        include: "{{ item.include | default(omit) }}"
        creates: "{{ item.creates | default(omit) }}"
      loop: "{{ workspace_archives }}"


    - name: ensure go packages are installed
      environment: "{{ workspace_environment }}"
      ansible.builtin.command:
        cmd: "go install {{ item.package }}"
        creates: "{{ item.creates }}"
      loop: "{{ workspace_go_packages }}"


    - name: ensure curl|bash software is installed
      environment: "{{ workspace_environment }}"
      block:
        - name: ensure curl|bash scripts are downloaded
          become: "{{ item.become|default(false) }}"
          ansible.builtin.get_url:
            url: "{{ item.url }}"
            dest: "{{ item.dest }}"
            mode: "{{ item.mode | default('0700') }}"
          loop: "{{ workspace_curl_bashes }}"

        - name: ensure curl|bash scripts are executed
          become: "{{ item.become | default(false) }}"
          ansible.builtin.command:
            cmd: bash {{ item.dest }}
            creates: "{{ item.creates }}"
          loop: "{{ workspace_curl_bashes }}"

    - name: ensure direct-download software is installed
      environment: "{{ workspace_environment }}"
      block:
        - name: ensure direct-download software is downloaded
          become: "{{ item.become|default(false) }}"
          ansible.builtin.get_url:
            url: "{{ item.url }}"
            dest: "{{ item.dest }}"
            mode: "{{ item.mode | default('0700') }}"
          loop: "{{ workspace_bins }}"


    - name: ensure git repositories are cloned
      ansible.builtin.git: # noqa git-latest
        repo: "{{ item.repo }}"
        dest: "{{ item.dest }}"
        force: "{{ item.force|default(omit) }}"
      changed_when: false
      loop: "{{ workspace_git_repos }}"


    - name: ensure make targets are run
      community.general.make:
        chdir: "{{ item.chdir }}"
        target: "{{ item.target }}"
      changed_when: false
      failed_when: item.failed_when
      loop: "{{ workspace_make_targets }}"


    - name: ensure users are in groups
      become: yes
      ansible.builtin.user:
        name: "{{ item.user }}"
        append: true
        groups: "{{ item.groups }}"
      loop: "{{ workspace_user_groups }}"


    - name: ensure files and links are in place
      ansible.builtin.file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: "{{ item.state }}"
        owner: "{{ item.owner|default(omit) }}"
        group: "{{ item.group|default(omit) }}"
        mode: "{{ item.mode|default(omit) }}"
      loop: "{{ workspace_files }}"

    - name: ensure sysctl entries are configured
      become: true
      ansible.builtin.sysctl:
        name: "{{ item.name }}"
        ignoreerrors: "{{ item.ignoreerrors|default(omit) }}"
        reload: "{{ item.reload|default(omit) }}"
        state: "{{ item.state|default(omit) }}"
        sysctl_file: "{{ item.sysctl_file|default(omit) }}"
        sysctl_set: "{{ item.sysctl_set|default(omit) }}"
        value: "{{ item.value|default(omit) }}"
      loop: "{{ workspace_sysctl }}"

    - name: ensure all packages are up to date
      become: true
      ansible.builtin.apt:
        name: '*'
        state: latest
      when: workspace_update_all_packages
